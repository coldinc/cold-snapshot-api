// AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
// Generated by scripts/generateFieldMap.ts

interface TableFieldMap {
  fields: { [key: string]: string };
  searchableFields: string[];
  booleanFields: string[];
  linkedRecordFields: Record<string, { linkedTable?: string; isArray: boolean }>;
}

function getTableFieldMap(tableName: string): TableFieldMap {
  switch (tableName) {
    case "Cold Snapshots":
      return {
        fields: {
          date: "Date",
          phaseId: "Phase ID",
          snapshotMarkdown: "Snapshot Markdown",
          keyUpdates: "Key Updates",
          id: "ID",
          created: "Created",
        },
        searchableFields: ["phaseId","snapshotMarkdown","keyUpdates","id"],
        booleanFields: [],
        linkedRecordFields: {
        },
      };
    case "Contacts":
      return {
        fields: {
          name: "Name",
          role: "Role",
          company: "Company",
          website: "Website",
          linkedin: "LinkedIn",
          overview: "Overview",
          email: "Email",
          phone: "Phone",
          source: "Source",
          sourceDetail: "Source (Detail)",
          relationshipType: "Relationship Type",
          relationshipStrength: "Relationship Strength",
          status: "Status",
          patternMatchCollaboration: "Pattern Match: Collaboration",
          patternMatchArchetype: "Pattern Match: Archetype",
          linkedLogs: "Linked Logs",
          linkedLogsSummary: "Linked Logs Summary",
          followupNeeded: "Followup Needed",
          nextFollowupDate: "Next Followup Date",
          followupSummary: "Followup Summary",
          latestRelatedLog: "Latest Related Log",
          id: "ID",
          lastModified: "Last Modified",
          linkedThreads: "Linked Threads",
          created: "Created",
        },
        searchableFields: ["name","role","company","overview","followupSummary","latestRelatedLog","id"],
        booleanFields: ["followupNeeded"],
        linkedRecordFields: {
          linkedLogs: { linkedTable: "Logs", isArray: true },
          linkedThreads: { linkedTable: "Threads", isArray: true },
        },
      };
    case "Logs":
      return {
        fields: {
          name: "Name",
          summary: "Summary",
          linkedContacts: "Linked Contacts",
          logType: "Log Type",
          date: "Date",
          content: "Content",
          followupNeeded: "Followup Needed",
          followupNotes: "Followup Notes",
          tags: "Tags",
          logId: "Log ID",
          author: "Author",
          createdAt: "Created At",
          lastModified: "Last Modified",
          linkedThreads: "Linked Threads",
        },
        searchableFields: ["name","content","followupNotes","tags","logId","author"],
        booleanFields: ["followupNeeded"],
        linkedRecordFields: {
          linkedContacts: { linkedTable: "Contacts", isArray: true },
          linkedThreads: { linkedTable: "Threads", isArray: true },
        },
      };
    case "Threads":
      return {
        fields: {
          name: "Name",
          type: "Type",
          status: "Status",
          description: "Description",
          linkedContacts: "Linked Contacts",
          linkedLogs: "Linked Logs",
          linkedLogsSummary: "Linked Logs Summary",
          createdDate: "Created Date",
          lastModified: "Last Modified",
          threadId: "Thread ID",
          parentThread: "Parent Thread",
          subthread: "Subthread",
        },
        searchableFields: ["name","threadId"],
        booleanFields: [],
        linkedRecordFields: {
          linkedContacts: { linkedTable: "Contacts", isArray: true },
          linkedLogs: { linkedTable: "Logs", isArray: true },
          parentThread: { linkedTable: "Threads", isArray: true },
          subthread: { linkedTable: "Threads", isArray: true },
        },
      };
    default:
      return { fields: {}, searchableFields: [], booleanFields: [], linkedRecordFields: {} };
  }
}

function getFieldMap(tableName: string): { [key: string]: string } {
  return getTableFieldMap(tableName).fields;
}

function filterMappedFields(data: Record<string, any>, fieldMap: Record<string, string>): Record<string, any> {
  const src = (data as any).fields || data;
  const result: Record<string, any> = {};
  for (const [internal, airtable] of Object.entries(fieldMap)) {
    if (src[internal] !== undefined) {
      result[airtable] = src[internal];
    } else if (src[airtable] !== undefined) {
      result[airtable] = src[airtable];
    }
  }
  return result;
}

export { getTableFieldMap, getFieldMap, filterMappedFields };